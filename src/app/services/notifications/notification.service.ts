import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { MailService } from './mail.service';
import { EmailTemplatesService } from './email-templates.service';

/**
 * Servicio centralizado para gestionar todas las notificaciones por correo electr√≥nico
 *
 * Proporciona m√©todos reutilizables para enviar diferentes tipos de notificaciones:
 * - Notificaci√≥n de inicio de sesi√≥n
 * - Email de bienvenida al registrarse
 * - Notificaci√≥n de cambio de contrase√±a
 * - Alertas de seguridad
 * - Y m√°s...
 *
 * @author Alan Soto
 * @version 1.0
 */
@Injectable({
  providedIn: 'root'
})
export class NotificationService {

  constructor(
    private mailService: MailService,
    private emailTemplates: EmailTemplatesService
  ) {}

  /**
   * Env√≠a una notificaci√≥n de inicio de sesi√≥n al usuario
   *
   * @param email - Email del usuario
   * @param userName - Nombre del usuario (opcional, se extrae del email si no se proporciona)
   * @returns Observable<void>
   */
  sendLoginNotification(email: string, userName?: string): Observable<void> {
    return new Observable(observer => {
      const name = userName || email.split('@')[0];
      const content = this.emailTemplates.getLoginNotificationTemplate(email, name);

      this.mailService.sendMail(
        [email],
        'üîê Nuevo inicio de sesi√≥n detectado',
        content,
        true
      ).subscribe({
        next: () => {
          console.log('‚úÖ Notificaci√≥n de inicio de sesi√≥n enviada a:', email);
          observer.next();
          observer.complete();
        },
        error: (err) => {
          console.error('‚ùå Error al enviar notificaci√≥n de inicio de sesi√≥n:', err);
          // No bloqueamos el flujo principal, solo logueamos el error
          observer.next();
          observer.complete();
        }
      });
    });
  }

  /**
   * Env√≠a un email de bienvenida al usuario reci√©n registrado
   *
   * @param email - Email del usuario
   * @param userName - Nombre del usuario
   * @returns Observable<void>
   */
  sendWelcomeEmail(email: string, userName: string): Observable<void> {
    return new Observable(observer => {
      const content = this.emailTemplates.getWelcomeTemplate(userName);

      this.mailService.sendMail(
        [email],
        'üéä ¬°Bienvenid@ a nuestra plataforma! üéä',
        content,
        false
      ).subscribe({
        next: () => {
          console.log('‚úÖ Email de bienvenida enviado a:', email);
          observer.next();
          observer.complete();
        },
        error: (err) => {
          console.error('‚ùå Error al enviar email de bienvenida:', err);
          // No bloqueamos el flujo principal, solo logueamos el error
          observer.next();
          observer.complete();
        }
      });
    });
  }

  /**
   * Env√≠a una notificaci√≥n de cambio de contrase√±a
   *
   * @param email - Email del usuario
   * @param userName - Nombre del usuario
   * @returns Observable<void>
   */
  sendPasswordChangeNotification(email: string, userName?: string): Observable<void> {
    return new Observable(observer => {
      const name = userName || email.split('@')[0];
      const content = this.emailTemplates.getPasswordChangeTemplate(name);

      this.mailService.sendMail(
        [email],
        'üîí Contrase√±a actualizada exitosamente',
        content,
        true
      ).subscribe({
        next: () => {
          console.log('‚úÖ Notificaci√≥n de cambio de contrase√±a enviada a:', email);
          observer.next();
          observer.complete();
        },
        error: (err) => {
          console.error('‚ùå Error al enviar notificaci√≥n de cambio de contrase√±a:', err);
          observer.next();
          observer.complete();
        }
      });
    });
  }

  /**
   * Env√≠a una alerta de seguridad gen√©rica
   *
   * @param email - Email del usuario
   * @param userName - Nombre del usuario
   * @param alertMessage - Mensaje de alerta personalizado
   * @returns Observable<void>
   */
  sendSecurityAlert(email: string, userName: string, alertMessage: string): Observable<void> {
    return new Observable(observer => {
      const content = this.emailTemplates.getSecurityAlertTemplate(userName, alertMessage);

      this.mailService.sendMail(
        [email],
        '‚ö†Ô∏è Alerta de seguridad',
        content,
        true
      ).subscribe({
        next: () => {
          console.log('‚úÖ Alerta de seguridad enviada a:', email);
          observer.next();
          observer.complete();
        },
        error: (err) => {
          console.error('‚ùå Error al enviar alerta de seguridad:', err);
          observer.next();
          observer.complete();
        }
      });
    });
  }

  /**
   * Env√≠a un correo personalizado
   *
   * @param email - Email del destinatario
   * @param subject - Asunto del correo
   * @param content - Contenido del correo
   * @param isHtml - Si el contenido es HTML
   * @returns Observable<void>
   */
  sendCustomEmail(email: string, subject: string, content: string, isHtml: boolean = true): Observable<void> {
    return new Observable(observer => {
      this.mailService.sendMail([email], subject, content, isHtml).subscribe({
        next: () => {
          console.log('‚úÖ Email personalizado enviado a:', email);
          observer.next();
          observer.complete();
        },
        error: (err) => {
          console.error('‚ùå Error al enviar email personalizado:', err);
          observer.next();
          observer.complete();
        }
      });
    });
  }
}


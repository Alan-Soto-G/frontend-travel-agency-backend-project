<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/app/components/table-crud/table-crud.component.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/components/table-crud/table-crud.component.html" />
              <option name="originalContent" value="&lt;main&gt;&#10;  &lt;div class=&quot;container mt-4&quot;&gt;&#10;    &lt;div id=&quot;head&quot;&gt;&#10;      &lt;h2 class=&quot;mb-4&quot;&gt;{{typeOfCrud}}&lt;/h2&gt;&#10;      &lt;button class=&quot;btn btn-primary mb-3&quot; (click)=&quot;handleActionClick('create')&quot;&gt;&#10;        Crear {{ typeOfCrud.slice(0, -lenSlice) }}&#10;      &lt;/button&gt;&#10;    &lt;/div&gt;&#10;&#10;    @if (data.length &gt; 0) {&#10;      &lt;p&gt;Total de {{ typeOfCrud.slice(0, -lenSlice+1) }}: {{ data.length }}&lt;/p&gt;&#10;    } @else {&#10;      &lt;p&gt;No hay registros disponibles&lt;/p&gt;&#10;    }&#10;&#10;    &lt;table class=&quot;table table-bordered&quot;&gt;&#10;      &lt;thead class=&quot;thead-light&quot;&gt;&#10;        &lt;tr id=&quot;headTable&quot;&gt;&#10;          &lt;th *ngFor=&quot;let col of headTable&quot;&gt;{{ col | titlecase }}&lt;/th&gt;&#10;        &lt;/tr&gt;&#10;      &lt;/thead&gt;&#10;&#10;      &lt;tbody&gt;&#10;        &lt;tr *ngFor=&quot;let row of data&quot; id=&quot;bodyTable&quot;&gt;&#10;          &lt;td *ngFor=&quot;let col of itemsData&quot;&gt;{{ getNestedValue(row, col) }}&lt;/td&gt;&#10;          &lt;td&gt;&lt;button class=&quot;btn btn-sm btn-info mr-2&quot; (click)=&quot;handleActionClick('edit', row._id)&quot;&gt;Edit&lt;/button&gt;&lt;/td&gt;&#10;          &lt;td&gt;&lt;button class=&quot;btn btn-sm btn-danger&quot; (click)=&quot;handleActionClick('delete', row._id)&quot;&gt;Delete&lt;/button&gt;&lt;/td&gt;&#10;        &lt;/tr&gt;&#10;      &lt;/tbody&gt;&#10;    &lt;/table&gt;&#10;  &lt;/div&gt;&#10;&lt;/main&gt;&#10;&#10;&lt;app-modal-crud&#10;  [title]=&quot;titleModal&quot;&#10;  [message]=&quot;messageModal&quot;&#10;  [typeService]=&quot;typeServiceModal&quot;&#10;  [textButton]=&quot;textButtonModal&quot;&#10;  [fields]=&quot;fields&quot;&#10;  [formData]=&quot;formDataModal&quot;&#10;  (formSubmitted)=&quot;onFormSubmitted($event)&quot;&#10;&gt;&lt;/app-modal-crud&gt;" />
              <option name="updatedContent" value="&lt;main&gt;&#13;&#10;  &lt;div class=&quot;container mt-4&quot;&gt;&#13;&#10;    &lt;div id=&quot;head&quot;&gt;&#13;&#10;      &lt;h2 class=&quot;mb-4&quot;&gt;{{typeOfCrud}}&lt;/h2&gt;&#13;&#10;      &lt;button class=&quot;btn btn-primary mb-3&quot; (click)=&quot;handleActionClick('create')&quot;&gt;&#13;&#10;        Crear {{ typeOfCrud.slice(0, -lenSlice) }}&#13;&#10;      &lt;/button&gt;&#13;&#10;    &lt;/div&gt;&#13;&#10;&#13;&#10;    @if (data.length &gt; 0) {&#13;&#10;      &lt;p&gt;Total de {{ typeOfCrud.slice(0, -lenSlice+1) }}: {{ data.length }}&lt;/p&gt;&#13;&#10;    } @else {&#13;&#10;      &lt;p&gt;No hay registros disponibles&lt;/p&gt;&#13;&#10;    }&#13;&#10;&#13;&#10;    &lt;table class=&quot;table table-bordered&quot;&gt;&#13;&#10;      &lt;thead class=&quot;thead-light&quot;&gt;&#13;&#10;        &lt;tr id=&quot;headTable&quot;&gt;&#13;&#10;          &lt;th *ngFor=&quot;let col of headTable&quot;&gt;{{ col | titlecase }}&lt;/th&gt;&#13;&#10;        &lt;/tr&gt;&#13;&#10;      &lt;/thead&gt;&#13;&#10;&#13;&#10;      &lt;tbody&gt;&#13;&#10;        &lt;tr *ngFor=&quot;let row of data&quot; id=&quot;bodyTable&quot;&gt;&#13;&#10;          &lt;td *ngFor=&quot;let col of itemsData&quot;&gt;{{ getNestedValue(row, col) }}&lt;/td&gt;&#13;&#10;          &lt;td&gt;&lt;button class=&quot;btn btn-sm btn-info mr-2&quot; (click)=&quot;handleActionClick('edit', row._id)&quot;&gt;Edit&lt;/button&gt;&lt;/td&gt;&#13;&#10;          &lt;td&gt;&lt;button class=&quot;btn btn-sm btn-danger&quot; (click)=&quot;handleActionClick('delete', row._id)&quot;&gt;Delete&lt;/button&gt;&lt;/td&gt;&#13;&#10;        &lt;/tr&gt;&#13;&#10;      &lt;/tbody&gt;&#13;&#10;    &lt;/table&gt;&#13;&#10;  &lt;/div&gt;&#13;&#10;&lt;/main&gt;&#13;&#10;&#13;&#10;&lt;app-modal-crud&#13;&#10;  [title]=&quot;titleModal&quot;&#13;&#10;  [message]=&quot;messageModal&quot;&#13;&#10;  [typeService]=&quot;typeServiceModal&quot;&#13;&#10;  [textButton]=&quot;textButtonModal&quot;&#13;&#10;  [fields]=&quot;fields&quot;&#13;&#10;  [formData]=&quot;formDataModal&quot;&#13;&#10;  (formSubmitted)=&quot;onFormSubmitted($event)&quot;&#13;&#10;&gt;&lt;/app-modal-crud&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/pages/user-roles/user-roles.component.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/pages/user-roles/user-roles.component.ts" />
              <option name="originalContent" value="import { Component, OnInit } from '@angular/core';&#10;import { AsignacionCrudComponent } from '../../components/asignacion-crud/asignacion-crud.component';&#10;import { User } from '../../models/user.model';&#10;import { Role } from '../../models/role.model';&#10;import { UserRole } from '../../models/user-role.model';&#10;import { UserRoleService } from &quot;../../services/user-role.service&quot;;&#10;import { UserService } from '../../services/user.service';&#10;import { RoleService } from '../../services/role.service';&#10;&#10;@Component({&#10;  selector: 'app-user-roles',&#10;  imports: [AsignacionCrudComponent],&#10;  templateUrl: './user-roles.component.html',&#10;  styleUrl: './user-roles.component.scss'&#10;})&#10;export class UserRolesComponent implements OnInit {&#10;  users: User[] = [];&#10;  allUsers: User[] = []; // Todos los usuarios para búsquedas y crear&#10;  roles: Role[] = [];&#10;  userRoles: Record&lt;string, Role[]&gt; = {}; // userId -&gt; array de roles&#10;  usersWithRoles: User[] = []; // Solo usuarios que tienen roles asignados&#10;  isSearchMode: boolean = false; // Indica si estamos en modo búsqueda&#10;  searchType: string = ''; // 'user' o 'role' para indicar el tipo de búsqueda&#10;&#10;  constructor(&#10;    private userRoleService: UserRoleService,&#10;    private userService: UserService,&#10;    private roleService: RoleService&#10;  ) {}&#10;&#10;  /**&#10;   * Inicializa la carga de datos al iniciar el componente.&#10;   */&#10;  ngOnInit(): void {&#10;    this.loadData();&#10;  }&#10;&#10;  /**&#10;   * Carga todos los datos necesarios: usuarios, roles y asignaciones.&#10;   */&#10;  loadData(): void {&#10;    // Cargar usuarios&#10;    this.userService.getUsers().subscribe({&#10;      next: (users) =&gt; {&#10;        this.users = users;&#10;        this.allUsers = [...users]; // Copia para usar en búsquedas y crear&#10;        this.loadUserRolesForAllUsers();&#10;      },&#10;      error: (err) =&gt; console.error('Error al cargar usuarios', err)&#10;    });&#10;&#10;    // Cargar todos los roles disponibles&#10;    this.roleService.getRoles().subscribe({&#10;      next: (roles) =&gt; this.roles = roles,&#10;      error: (err) =&gt; console.error('Error al cargar roles', err)&#10;    });&#10;  }&#10;&#10;  /**&#10;   * Carga los roles asignados para todos los usuarios.&#10;   */&#10;  private loadUserRolesForAllUsers(): void {&#10;    let loadedUsersCount = 0;&#10;&#10;    this.users.forEach(user =&gt; {&#10;      this.userRoleService.getUserRolesByUserId(user._id).subscribe({&#10;        next: (userRoles: UserRole[]) =&gt; {&#10;          if (userRoles &amp;&amp; userRoles.length &gt; 0) {&#10;            this.userRoles[user._id] = userRoles.map(ur =&gt; ur.role);&#10;            // Solo agregar usuarios que tienen roles asignados&#10;            if (!this.usersWithRoles.find(u =&gt; u._id === user._id)) {&#10;              this.usersWithRoles.push(user);&#10;            }&#10;          }&#10;&#10;          loadedUsersCount++;&#10;          // Cuando se han cargado todos los usuarios, ordenar la lista&#10;          if (loadedUsersCount === this.users.length) {&#10;            this.sortUsersWithRoles();&#10;          }&#10;        },&#10;        error: (err) =&gt; {&#10;          console.error(`Error al cargar roles para usuario ${user.name}`, err);&#10;          loadedUsersCount++;&#10;        }&#10;      });&#10;    });&#10;  }&#10;&#10;  /**&#10;   * Ordena los usuarios con roles por nombre&#10;   */&#10;  private sortUsersWithRoles(): void {&#10;    this.usersWithRoles.sort((a, b) =&gt; a.name.localeCompare(b.name));&#10;  }&#10;&#10;  /**&#10;   * Maneja el evento de cambio de rol (marcar/desmarcar checkbox).&#10;   * @param event Evento emitido desde el componente asignacion-crud&#10;   */&#10;  onRoleToggle(event: {user: User, role: Role, checked: boolean}): void {&#10;    if (event.checked) {&#10;      // Crear nueva asignación&#10;      this.userRoleService.createUserRole(event.user._id, event.role._id).subscribe({&#10;        next: () =&gt; {&#10;          // Actualizar la lista local&#10;          if (!this.userRoles[event.user._id]) {&#10;            this.userRoles[event.user._id] = [];&#10;            // Si es el primer rol del usuario, agregarlo a la lista de usuarios con roles&#10;            if (!this.usersWithRoles.find(u =&gt; u._id === event.user._id)) {&#10;              this.usersWithRoles.push(event.user);&#10;              this.sortUsersWithRoles();&#10;            }&#10;          }&#10;          this.userRoles[event.user._id].push(event.role);&#10;          console.log(`Rol ${event.role.name} asignado a ${event.user.name}`);&#10;        },&#10;        error: (err) =&gt; console.error('Error al crear asignación de rol', err)&#10;      });&#10;    } else {&#10;      // Eliminar asignación existente&#10;      this.userRoleService.deleteUserRole(event.user._id, event.role._id).subscribe({&#10;        next: () =&gt; {&#10;          // Actualizar la lista local&#10;          if (this.userRoles[event.user._id]) {&#10;            this.userRoles[event.user._id] = this.userRoles[event.user._id].filter(&#10;              role =&gt; role._id !== event.role._id&#10;            );&#10;&#10;            // Si el usuario ya no tiene roles, removerlo de la lista de usuarios con roles&#10;            if (this.userRoles[event.user._id].length === 0) {&#10;              this.usersWithRoles = this.usersWithRoles.filter(u =&gt; u._id !== event.user._id);&#10;              delete this.userRoles[event.user._id];&#10;            }&#10;          }&#10;          console.log(`Rol ${event.role.name} removido de ${event.user.name}`);&#10;        },&#10;        error: (err) =&gt; console.error('Error al eliminar asignación de rol', err)&#10;      });&#10;    }&#10;  }&#10;&#10;  /**&#10;   * Maneja la creación de asignaciones desde el modal de crear&#10;   * @param event Evento con userId y roleId&#10;   */&#10;  onCreateAssignment(event: {userId: string, roleId: string}): void {&#10;    const user = this.allUsers.find(u =&gt; u._id === event.userId);&#10;    const role = this.roles.find(r =&gt; r._id === event.roleId);&#10;&#10;    if (user &amp;&amp; role) {&#10;      // Verificar si ya existe la asignación&#10;      const hasRole = this.userRoles[event.userId]?.some(r =&gt; r._id === event.roleId);&#10;&#10;      if (hasRole) {&#10;        // Eliminar asignación&#10;        this.onRoleToggle({user, role, checked: false});&#10;      } else {&#10;        // Crear asignación&#10;        this.onRoleToggle({user, role, checked: true});&#10;      }&#10;    }&#10;  }&#10;&#10;  /**&#10;   * Busca asignaciones por usuario&#10;   * @param userId ID del usuario a buscar&#10;   */&#10;  onSearchByUser(userId: string): void {&#10;    this.userRoleService.getUserRolesByUserId(userId).subscribe({&#10;      next: (userRoles: UserRole[]) =&gt; {&#10;        this.isSearchMode = true;&#10;        this.searchType = 'user';&#10;        this.usersWithRoles = [];&#10;        this.userRoles = {};&#10;&#10;        // Encontrar el usuario siempre (tenga o no roles)&#10;        const user = this.allUsers.find(u =&gt; u._id === userId);&#10;        if (user) {&#10;          this.usersWithRoles = [user];&#10;&#10;          if (userRoles &amp;&amp; userRoles.length &gt; 0) {&#10;            // Usuario tiene roles asignados&#10;            this.userRoles[userId] = userRoles.map(ur =&gt; ur.role);&#10;          } else {&#10;            // Usuario no tiene roles asignados - inicializar con array vacío&#10;            this.userRoles[userId] = [];&#10;          }&#10;        }&#10;&#10;        console.log(`Búsqueda por usuario completada: ${userRoles.length} asignaciones encontradas`);&#10;      },&#10;      error: (err) =&gt; console.error('Error al buscar por usuario', err)&#10;    });&#10;  }&#10;&#10;  /**&#10;   * Busca asignaciones por rol&#10;   * @param roleId ID del rol a buscar&#10;   */&#10;  onSearchByRole(roleId: string): void {&#10;    this.userRoleService.getUserRolesByRoleId(roleId).subscribe({&#10;      next: (userRoles: UserRole[]) =&gt; {&#10;        this.isSearchMode = true;&#10;        this.searchType = 'role';&#10;        this.usersWithRoles = [];&#10;        this.userRoles = {};&#10;&#10;        if (userRoles &amp;&amp; userRoles.length &gt; 0) {&#10;          // Agrupar por usuario&#10;          const userRoleMap: Record&lt;string, Role[]&gt; = {};&#10;          const userSet = new Set&lt;string&gt;();&#10;&#10;          userRoles.forEach(ur =&gt; {&#10;            if (!userRoleMap[ur.user._id]) {&#10;              userRoleMap[ur.user._id] = [];&#10;            }&#10;            userRoleMap[ur.user._id].push(ur.role);&#10;            userSet.add(ur.user._id);&#10;          });&#10;&#10;          // Crear lista de usuarios y asignaciones&#10;          userSet.forEach(userId =&gt; {&#10;            const user = this.allUsers.find(u =&gt; u._id === userId);&#10;            if (user) {&#10;              this.usersWithRoles.push(user);&#10;              this.userRoles[userId] = userRoleMap[userId];&#10;            }&#10;          });&#10;&#10;          this.sortUsersWithRoles();&#10;        }&#10;        // Si no hay usuarios con este rol, usersWithRoles quedará vacío y se mostrará &quot;Nadie posee este rol&quot;&#10;&#10;        console.log(`Búsqueda por rol completada: ${userRoles.length} asignaciones encontradas`);&#10;      },&#10;      error: (err) =&gt; console.error('Error al buscar por rol', err)&#10;    });&#10;  }&#10;&#10;  /**&#10;   * Lista todas las asignaciones (botón &quot;Listar Todo&quot;)&#10;   */&#10;  onListAll(): void {&#10;    // Limpiar completamente el estado antes de recargar&#10;    this.isSearchMode = false;&#10;    this.searchType = '';&#10;    this.usersWithRoles = [];&#10;    this.userRoles = {};&#10;    &#10;    // Recargar todos los datos desde cero&#10;    this.loadData();&#10;    console.log('Cargando todas las asignaciones...');&#10;  }&#10;&#10;  /**&#10;   * Resetea la vista a mostrar todos los usuarios con roles&#10;   */&#10;  resetToAllUsers(): void {&#10;    this.isSearchMode = false;&#10;    this.loadData();&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="import { Component, OnInit } from '@angular/core';&#10;import { AsignacionCrudComponent } from '../../components/asignacion-crud/asignacion-crud.component';&#10;import { User } from '../../models/user.model';&#10;import { Role } from '../../models/role.model';&#10;import { UserRole } from '../../models/user-role.model';&#10;import { UserRoleService } from &quot;../../services/user-role.service&quot;;&#10;import { UserService } from '../../services/user.service';&#10;import { RoleService } from '../../services/role.service';&#10;&#10;@Component({&#10;  selector: 'app-user-roles',&#10;  imports: [AsignacionCrudComponent],&#10;  templateUrl: './user-roles.component.html',&#10;  styleUrl: './user-roles.component.scss'&#10;})&#10;export class UserRolesComponent implements OnInit {&#10;  users: User[] = [];&#10;  allUsers: User[] = []; // Todos los usuarios para búsquedas y crear&#10;  roles: Role[] = [];&#10;  userRoles: Record&lt;string, Role[]&gt; = {}; // userId -&gt; array de roles&#10;  usersWithRoles: User[] = []; // Solo usuarios que tienen roles asignados&#10;  isSearchMode: boolean = false; // Indica si estamos en modo búsqueda&#10;  searchType: string = ''; // 'user' o 'role' para indicar el tipo de búsqueda&#10;&#10;  constructor(&#10;    private userRoleService: UserRoleService,&#10;    private userService: UserService,&#10;    private roleService: RoleService&#10;  ) {}&#10;&#10;  /**&#10;   * Inicializa la carga de datos al iniciar el componente.&#10;   */&#10;  ngOnInit(): void {&#10;    this.loadData();&#10;  }&#10;&#10;  /**&#10;   * Carga todos los datos necesarios: usuarios, roles y asignaciones.&#10;   */&#10;  loadData(): void {&#10;    // Cargar usuarios&#10;    this.userService.getUsers().subscribe({&#10;      next: (users) =&gt; {&#10;        this.users = users;&#10;        this.allUsers = [...users]; // Copia para usar en búsquedas y crear&#10;        this.loadUserRolesForAllUsers();&#10;      },&#10;      error: (err) =&gt; console.error('Error al cargar usuarios', err)&#10;    });&#10;&#10;    // Cargar todos los roles disponibles&#10;    this.roleService.getRoles().subscribe({&#10;      next: (roles) =&gt; this.roles = roles,&#10;      error: (err) =&gt; console.error('Error al cargar roles', err)&#10;    });&#10;  }&#10;&#10;  /**&#10;   * Carga los roles asignados para todos los usuarios.&#10;   */&#10;  private loadUserRolesForAllUsers(): void {&#10;    let loadedUsersCount = 0;&#10;&#10;    this.users.forEach(user =&gt; {&#10;      this.userRoleService.getUserRolesByUserId(user._id).subscribe({&#10;        next: (userRoles: UserRole[]) =&gt; {&#10;          if (userRoles &amp;&amp; userRoles.length &gt; 0) {&#10;            this.userRoles[user._id] = userRoles.map(ur =&gt; ur.role);&#10;            // Solo agregar usuarios que tienen roles asignados&#10;            if (!this.usersWithRoles.find(u =&gt; u._id === user._id)) {&#10;              this.usersWithRoles.push(user);&#10;            }&#10;          }&#10;&#10;          loadedUsersCount++;&#10;          // Cuando se han cargado todos los usuarios, ordenar la lista&#10;          if (loadedUsersCount === this.users.length) {&#10;            this.sortUsersWithRoles();&#10;          }&#10;        },&#10;        error: (err) =&gt; {&#10;          console.error(`Error al cargar roles para usuario ${user.name}`, err);&#10;          loadedUsersCount++;&#10;        }&#10;      });&#10;    });&#10;  }&#10;&#10;  /**&#10;   * Ordena los usuarios con roles por nombre&#10;   */&#10;  private sortUsersWithRoles(): void {&#10;    this.usersWithRoles.sort((a, b) =&gt; a.name.localeCompare(b.name));&#10;  }&#10;&#10;  /**&#10;   * Maneja el evento de cambio de rol (marcar/desmarcar checkbox).&#10;   * @param event Evento emitido desde el componente asignacion-crud&#10;   */&#10;  onRoleToggle(event: {user: User, role: Role, checked: boolean}): void {&#10;    if (event.checked) {&#10;      // Crear nueva asignación&#10;      this.userRoleService.createUserRole(event.user._id, event.role._id).subscribe({&#10;        next: () =&gt; {&#10;          // Actualizar la lista local&#10;          if (!this.userRoles[event.user._id]) {&#10;            this.userRoles[event.user._id] = [];&#10;            // Si es el primer rol del usuario, agregarlo a la lista de usuarios con roles&#10;            if (!this.usersWithRoles.find(u =&gt; u._id === event.user._id)) {&#10;              this.usersWithRoles.push(event.user);&#10;              this.sortUsersWithRoles();&#10;            }&#10;          }&#10;          this.userRoles[event.user._id].push(event.role);&#10;          console.log(`Rol ${event.role.name} asignado a ${event.user.name}`);&#10;        },&#10;        error: (err) =&gt; console.error('Error al crear asignación de rol', err)&#10;      });&#10;    } else {&#10;      // Eliminar asignación existente&#10;      this.userRoleService.deleteUserRole(event.user._id, event.role._id).subscribe({&#10;        next: () =&gt; {&#10;          // Actualizar la lista local&#10;          if (this.userRoles[event.user._id]) {&#10;            this.userRoles[event.user._id] = this.userRoles[event.user._id].filter(&#10;              role =&gt; role._id !== event.role._id&#10;            );&#10;&#10;            // Si el usuario ya no tiene roles, removerlo de la lista de usuarios con roles&#10;            if (this.userRoles[event.user._id].length === 0) {&#10;              this.usersWithRoles = this.usersWithRoles.filter(u =&gt; u._id !== event.user._id);&#10;              delete this.userRoles[event.user._id];&#10;            }&#10;          }&#10;          console.log(`Rol ${event.role.name} removido de ${event.user.name}`);&#10;        },&#10;        error: (err) =&gt; console.error('Error al eliminar asignación de rol', err)&#10;      });&#10;    }&#10;  }&#10;&#10;  /**&#10;   * Maneja la creación de asignaciones desde el modal de crear&#10;   * @param event Evento con userId y roleId&#10;   */&#10;  onCreateAssignment(event: {userId: string, roleId: string}): void {&#10;    const user = this.allUsers.find(u =&gt; u._id === event.userId);&#10;    const role = this.roles.find(r =&gt; r._id === event.roleId);&#10;&#10;    if (user &amp;&amp; role) {&#10;      // Verificar si ya existe la asignación&#10;      const hasRole = this.userRoles[event.userId]?.some(r =&gt; r._id === event.roleId);&#10;&#10;      if (hasRole) {&#10;        // Eliminar asignación&#10;        this.onRoleToggle({user, role, checked: false});&#10;      } else {&#10;        // Crear asignación&#10;        this.onRoleToggle({user, role, checked: true});&#10;      }&#10;    }&#10;  }&#10;&#10;  /**&#10;   * Busca asignaciones por usuario&#10;   * @param userId ID del usuario a buscar&#10;   */&#10;  onSearchByUser(userId: string): void {&#10;    this.userRoleService.getUserRolesByUserId(userId).subscribe({&#10;      next: (userRoles: UserRole[]) =&gt; {&#10;        this.isSearchMode = true;&#10;        this.searchType = 'user';&#10;        this.usersWithRoles = [];&#10;        this.userRoles = {};&#10;&#10;        // Encontrar el usuario siempre (tenga o no roles)&#10;        const user = this.allUsers.find(u =&gt; u._id === userId);&#10;        if (user) {&#10;          this.usersWithRoles = [user];&#10;&#10;          if (userRoles &amp;&amp; userRoles.length &gt; 0) {&#10;            // Usuario tiene roles asignados&#10;            this.userRoles[userId] = userRoles.map(ur =&gt; ur.role);&#10;          } else {&#10;            // Usuario no tiene roles asignados - inicializar con array vacío&#10;            this.userRoles[userId] = [];&#10;          }&#10;        }&#10;&#10;        console.log(`Búsqueda por usuario completada: ${userRoles.length} asignaciones encontradas`);&#10;      },&#10;      error: (err) =&gt; console.error('Error al buscar por usuario', err)&#10;    });&#10;  }&#10;&#10;  /**&#10;   * Busca asignaciones por rol&#10;   * @param roleId ID del rol a buscar&#10;   */&#10;  onSearchByRole(roleId: string): void {&#10;    this.userRoleService.getUserRolesByRoleId(roleId).subscribe({&#10;      next: (userRoles: UserRole[]) =&gt; {&#10;        this.isSearchMode = true;&#10;        this.searchType = 'role';&#10;        this.usersWithRoles = [];&#10;        this.userRoles = {};&#10;&#10;        if (userRoles &amp;&amp; userRoles.length &gt; 0) {&#10;          // Agrupar por usuario&#10;          const userRoleMap: Record&lt;string, Role[]&gt; = {};&#10;          const userSet = new Set&lt;string&gt;();&#10;&#10;          userRoles.forEach(ur =&gt; {&#10;            if (!userRoleMap[ur.user._id]) {&#10;              userRoleMap[ur.user._id] = [];&#10;            }&#10;            userRoleMap[ur.user._id].push(ur.role);&#10;            userSet.add(ur.user._id);&#10;          });&#10;&#10;          // Crear lista de usuarios y asignaciones&#10;          userSet.forEach(userId =&gt; {&#10;            const user = this.allUsers.find(u =&gt; u._id === userId);&#10;            if (user) {&#10;              this.usersWithRoles.push(user);&#10;              this.userRoles[userId] = userRoleMap[userId];&#10;            }&#10;          });&#10;&#10;          this.sortUsersWithRoles();&#10;        }&#10;        // Si no hay usuarios con este rol, usersWithRoles quedará vacío y se mostrará &quot;Nadie posee este rol&quot;&#10;&#10;        console.log(`Búsqueda por rol completada: ${userRoles.length} asignaciones encontradas`);&#10;      },&#10;      error: (err) =&gt; console.error('Error al buscar por rol', err)&#10;    });&#10;  }&#10;&#10;  /**&#10;   * Lista todas las asignaciones (botón &quot;Listar Todo&quot;)&#10;   */&#10;  onListAll(): void {&#10;    // Limpiar completamente el estado antes de recargar&#10;    this.isSearchMode = false;&#10;    this.searchType = '';&#10;    this.usersWithRoles = [];&#10;    this.userRoles = {};&#10;    &#10;    // Recargar todos los datos desde cero&#10;    this.loadData();&#10;    console.log('Cargando todas las asignaciones...');&#10;  }&#10;&#10;  /**&#10;   * Resetea la vista a mostrar todos los usuarios con roles&#10;   */&#10;  resetToAllUsers(): void {&#10;    this.isSearchMode = false;&#10;    this.loadData();&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/services/user-role.service.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/services/user-role.service.ts" />
              <option name="originalContent" value="import { Injectable } from '@angular/core';&#10;import { HttpClient } from '@angular/common/http';&#10;import { Observable } from 'rxjs';&#10;import { UserRole } from '../models/user-role.model';&#10;import { environment } from 'src/environments/environment';&#10;&#10;/**&#10; * Servicio para gestionar operaciones CRUD de roles de usuario contra la API REST.&#10; * Proporciona métodos para obtener, crear, actualizar y eliminar asignaciones de roles a usuarios.&#10; * Utiliza HttpClient para realizar peticiones HTTP al backend.&#10; */&#10;@Injectable({ providedIn: 'root' })&#10;export class UserRoleService {&#10;  /**&#10;   * URL base de la API para roles de usuario.&#10;   * Se obtiene desde las variables de entorno.&#10;   */&#10;  private apiUrl = `${environment.apiUrl}user-role`;&#10;&#10;  /**&#10;   * Inyecta el cliente HTTP para realizar peticiones al backend.&#10;   * @param http Cliente HTTP de Angular&#10;   */&#10;  constructor(private http: HttpClient) {}&#10;&#10;  /**&#10;   * Obtiene todas las asignaciones de roles a usuarios registradas en el sistema.&#10;   * @returns Observable con un array de asignaciones de roles a usuarios&#10;   */&#10;  getUserRoles(): Observable&lt;UserRole[]&gt; {&#10;    return this.http.get&lt;UserRole[]&gt;(this.apiUrl);&#10;  }&#10;&#10;  /**&#10;   * Obtiene todas las asignaciones de roles para un usuario específico.&#10;   * @param userId Identificador único del usuario&#10;   * @returns Observable con un array de asignaciones de roles para el usuario&#10;   */&#10;  getUserRolesByUserId(userId: string): Observable&lt;UserRole[]&gt; {&#10;    return this.http.get&lt;UserRole[]&gt;(`${this.apiUrl}/user/${userId}`);&#10;  }&#10;&#10;  /**&#10;   * Obtiene todas las asignaciones de usuarios para un rol específico.&#10;   * @param roleId Identificador único del rol&#10;   * @returns Observable con un array de asignaciones de usuarios para el rol&#10;   */&#10;  getUserRolesByRoleId(roleId: string): Observable&lt;UserRole[]&gt; {&#10;    return this.http.get&lt;UserRole[]&gt;(`${this.apiUrl}/role/${roleId}`);&#10;  }&#10;&#10;  /**&#10;   * Crea una nueva asignación de rol a usuario en el sistema.&#10;   * @param userId ID del usuario&#10;   * @param roleId ID del rol&#10;   * @returns Observable con la asignación creada&#10;   */&#10;  createUserRole(userId: string, roleId: string): Observable&lt;UserRole&gt; {&#10;    return this.http.post&lt;UserRole&gt;(`${this.apiUrl}/user/${userId}/role/${roleId}`, {});&#10;  }&#10;&#10;  /**&#10;   * Elimina una asignación de rol a usuario del sistema.&#10;   * @param userId Identificador único del usuario&#10;   * @param roleId Identificador único del rol&#10;   * @returns Observable vacío cuando la operación es exitosa&#10;   */&#10;  deleteUserRole(userId: string, roleId: string): Observable&lt;void&gt; {&#10;    return this.http.delete&lt;void&gt;(`${this.apiUrl}/user/${userId}/role/${roleId}`);&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="import { Injectable } from '@angular/core';&#10;import { HttpClient } from '@angular/common/http';&#10;import { Observable } from 'rxjs';&#10;import { UserRole } from '../models/user-role.model';&#10;import { environment } from 'src/environments/environment';&#10;&#10;/**&#10; * Servicio para gestionar operaciones CRUD de roles de usuario contra la API REST.&#10; * Proporciona métodos para obtener, crear, actualizar y eliminar asignaciones de roles a usuarios.&#10; * Utiliza HttpClient para realizar peticiones HTTP al backend.&#10; */&#10;@Injectable({ providedIn: 'root' })&#10;export class UserRoleService {&#10;  /**&#10;   * URL base de la API para roles de usuario.&#10;   * Se obtiene desde las variables de entorno.&#10;   */&#10;  private apiUrl = `${environment.apiUrl}user-role`;&#10;&#10;  /**&#10;   * Inyecta el cliente HTTP para realizar peticiones al backend.&#10;   * @param http Cliente HTTP de Angular&#10;   */&#10;  constructor(private http: HttpClient) {}&#10;&#10;  /**&#10;   * Obtiene todas las asignaciones de roles a usuarios registradas en el sistema.&#10;   * @returns Observable con un array de asignaciones de roles a usuarios&#10;   */&#10;  getUserRoles(): Observable&lt;UserRole[]&gt; {&#10;    return this.http.get&lt;UserRole[]&gt;(this.apiUrl);&#10;  }&#10;&#10;  /**&#10;   * Obtiene todas las asignaciones de roles para un usuario específico.&#10;   * @param userId Identificador único del usuario&#10;   * @returns Observable con un array de asignaciones de roles para el usuario&#10;   */&#10;  getUserRolesByUserId(userId: string): Observable&lt;UserRole[]&gt; {&#10;    return this.http.get&lt;UserRole[]&gt;(`${this.apiUrl}/user/${userId}`);&#10;  }&#10;&#10;  /**&#10;   * Obtiene todas las asignaciones de usuarios para un rol específico.&#10;   * @param roleId Identificador único del rol&#10;   * @returns Observable con un array de asignaciones de usuarios para el rol&#10;   */&#10;  getUserRolesByRoleId(roleId: string): Observable&lt;UserRole[]&gt; {&#10;    return this.http.get&lt;UserRole[]&gt;(`${this.apiUrl}/role/${roleId}`);&#10;  }&#10;&#10;  /**&#10;   * Crea una nueva asignación de rol a usuario en el sistema.&#10;   * @param userId ID del usuario&#10;   * @param roleId ID del rol&#10;   * @returns Observable con la asignación creada&#10;   */&#10;  createUserRole(userId: string, roleId: string): Observable&lt;UserRole&gt; {&#10;    return this.http.post&lt;UserRole&gt;(`${this.apiUrl}/user/${userId}/role/${roleId}`, {});&#10;  }&#10;&#10;  /**&#10;   * Elimina una asignación de rol a usuario del sistema.&#10;   * @param userId Identificador único del usuario&#10;   * @param roleId Identificador único del rol&#10;   * @returns Observable vacío cuando la operación es exitosa&#10;   */&#10;  deleteUserRole(userId: string, roleId: string): Observable&lt;void&gt; {&#10;    return this.http.delete&lt;void&gt;(`${this.apiUrl}/user/${userId}/role/${roleId}`);&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>
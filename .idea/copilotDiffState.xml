<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/app/components/table-crud/table-crud.component.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/components/table-crud/table-crud.component.html" />
              <option name="originalContent" value="&lt;main&gt;&#10;  &lt;div class=&quot;container mt-4&quot;&gt;&#10;    &lt;div id=&quot;head&quot;&gt;&#10;      &lt;h2 class=&quot;mb-4&quot;&gt;{{typeOfCrud}}&lt;/h2&gt;&#10;      &lt;button class=&quot;btn btn-primary mb-3&quot; (click)=&quot;handleActionClick('create')&quot;&gt;&#10;        Crear {{ typeOfCrud.slice(0, -lenSlice) }}&#10;      &lt;/button&gt;&#10;    &lt;/div&gt;&#10;&#10;    @if (data.length &gt; 0) {&#10;      &lt;p&gt;Total de {{ typeOfCrud.slice(0, -lenSlice+1) }}: {{ data.length }}&lt;/p&gt;&#10;    } @else {&#10;      &lt;p&gt;No hay registros disponibles&lt;/p&gt;&#10;    }&#10;&#10;    &lt;table class=&quot;table table-bordered&quot;&gt;&#10;      &lt;thead class=&quot;thead-light&quot;&gt;&#10;        &lt;tr id=&quot;headTable&quot;&gt;&#10;          &lt;th *ngFor=&quot;let col of headTable&quot;&gt;{{ col | titlecase }}&lt;/th&gt;&#10;        &lt;/tr&gt;&#10;      &lt;/thead&gt;&#10;&#10;      &lt;tbody&gt;&#10;        &lt;tr *ngFor=&quot;let row of data&quot; id=&quot;bodyTable&quot;&gt;&#10;          &lt;td *ngFor=&quot;let col of itemsData&quot;&gt;{{ getNestedValue(row, col) }}&lt;/td&gt;&#10;          &lt;td&gt;&lt;button class=&quot;btn btn-sm btn-info mr-2&quot; (click)=&quot;handleActionClick('edit', row._id)&quot;&gt;Edit&lt;/button&gt;&lt;/td&gt;&#10;          &lt;td&gt;&lt;button class=&quot;btn btn-sm btn-danger&quot; (click)=&quot;handleActionClick('delete', row._id)&quot;&gt;Delete&lt;/button&gt;&lt;/td&gt;&#10;        &lt;/tr&gt;&#10;      &lt;/tbody&gt;&#10;    &lt;/table&gt;&#10;  &lt;/div&gt;&#10;&lt;/main&gt;&#10;&#10;&lt;app-modal-crud&#10;  [title]=&quot;titleModal&quot;&#10;  [message]=&quot;messageModal&quot;&#10;  [typeService]=&quot;typeServiceModal&quot;&#10;  [textButton]=&quot;textButtonModal&quot;&#10;  [fields]=&quot;fields&quot;&#10;  [formData]=&quot;formDataModal&quot;&#10;  (formSubmitted)=&quot;onFormSubmitted($event)&quot;&#10;&gt;&lt;/app-modal-crud&gt;" />
              <option name="updatedContent" value="&lt;main&gt;&#13;&#10;  &lt;div class=&quot;container mt-4&quot;&gt;&#13;&#10;    &lt;div id=&quot;head&quot;&gt;&#13;&#10;      &lt;h2 class=&quot;mb-4&quot;&gt;{{typeOfCrud}}&lt;/h2&gt;&#13;&#10;      &lt;button class=&quot;btn btn-primary mb-3&quot; (click)=&quot;handleActionClick('create')&quot;&gt;&#13;&#10;        Crear {{ typeOfCrud.slice(0, -lenSlice) }}&#13;&#10;      &lt;/button&gt;&#13;&#10;    &lt;/div&gt;&#13;&#10;&#13;&#10;    @if (data.length &gt; 0) {&#13;&#10;      &lt;p&gt;Total de {{ typeOfCrud.slice(0, -lenSlice+1) }}: {{ data.length }}&lt;/p&gt;&#13;&#10;    } @else {&#13;&#10;      &lt;p&gt;No hay registros disponibles&lt;/p&gt;&#13;&#10;    }&#13;&#10;&#13;&#10;    &lt;table class=&quot;table table-bordered&quot;&gt;&#13;&#10;      &lt;thead class=&quot;thead-light&quot;&gt;&#13;&#10;        &lt;tr id=&quot;headTable&quot;&gt;&#13;&#10;          &lt;th *ngFor=&quot;let col of headTable&quot;&gt;{{ col | titlecase }}&lt;/th&gt;&#13;&#10;        &lt;/tr&gt;&#13;&#10;      &lt;/thead&gt;&#13;&#10;&#13;&#10;      &lt;tbody&gt;&#13;&#10;        &lt;tr *ngFor=&quot;let row of data&quot; id=&quot;bodyTable&quot;&gt;&#13;&#10;          &lt;td *ngFor=&quot;let col of itemsData&quot;&gt;{{ getNestedValue(row, col) }}&lt;/td&gt;&#13;&#10;          &lt;td&gt;&lt;button class=&quot;btn btn-sm btn-info mr-2&quot; (click)=&quot;handleActionClick('edit', row._id)&quot;&gt;Edit&lt;/button&gt;&lt;/td&gt;&#13;&#10;          &lt;td&gt;&lt;button class=&quot;btn btn-sm btn-danger&quot; (click)=&quot;handleActionClick('delete', row._id)&quot;&gt;Delete&lt;/button&gt;&lt;/td&gt;&#13;&#10;        &lt;/tr&gt;&#13;&#10;      &lt;/tbody&gt;&#13;&#10;    &lt;/table&gt;&#13;&#10;  &lt;/div&gt;&#13;&#10;&lt;/main&gt;&#13;&#10;&#13;&#10;&lt;app-modal-crud&#13;&#10;  [title]=&quot;titleModal&quot;&#13;&#10;  [message]=&quot;messageModal&quot;&#13;&#10;  [typeService]=&quot;typeServiceModal&quot;&#13;&#10;  [textButton]=&quot;textButtonModal&quot;&#13;&#10;  [fields]=&quot;fields&quot;&#13;&#10;  [formData]=&quot;formDataModal&quot;&#13;&#10;  (formSubmitted)=&quot;onFormSubmitted($event)&quot;&#13;&#10;&gt;&lt;/app-modal-crud&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/services/user-role.service.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/services/user-role.service.ts" />
              <option name="originalContent" value="import { Injectable } from '@angular/core';&#10;import { HttpClient } from '@angular/common/http';&#10;import { Observable } from 'rxjs';&#10;import { UserRole } from '../models/user-role.model';&#10;import { environment } from 'src/environments/environment';&#10;&#10;/**&#10; * Servicio para gestionar operaciones CRUD de roles de usuario contra la API REST.&#10; * Proporciona métodos para obtener, crear, actualizar y eliminar asignaciones de roles a usuarios.&#10; * Utiliza HttpClient para realizar peticiones HTTP al backend.&#10; */&#10;@Injectable({ providedIn: 'root' })&#10;export class UserRoleService {&#10;  /**&#10;   * URL base de la API para roles de usuario.&#10;   * Se obtiene desde las variables de entorno.&#10;   */&#10;  private apiUrl = `${environment.apiUrl}user-role`;&#10;&#10;  /**&#10;   * Inyecta el cliente HTTP para realizar peticiones al backend.&#10;   * @param http Cliente HTTP de Angular&#10;   */&#10;  constructor(private http: HttpClient) {}&#10;&#10;  /**&#10;   * Obtiene todas las asignaciones de roles a usuarios registradas en el sistema.&#10;   * @returns Observable con un array de asignaciones de roles a usuarios&#10;   */&#10;  getUserRoles(): Observable&lt;UserRole[]&gt; {&#10;    return this.http.get&lt;UserRole[]&gt;(this.apiUrl);&#10;  }&#10;&#10;  /**&#10;   * Obtiene todas las asignaciones de roles para un usuario específico.&#10;   * @param userId Identificador único del usuario&#10;   * @returns Observable con un array de asignaciones de roles para el usuario&#10;   */&#10;  getUserRolesByUserId(userId: string): Observable&lt;UserRole[]&gt; {&#10;    return this.http.get&lt;UserRole[]&gt;(`${this.apiUrl}/user/${userId}`);&#10;  }&#10;&#10;  /**&#10;   * Obtiene todas las asignaciones de usuarios para un rol específico.&#10;   * @param roleId Identificador único del rol&#10;   * @returns Observable con un array de asignaciones de usuarios para el rol&#10;   */&#10;  getUserRolesByRoleId(roleId: string): Observable&lt;UserRole[]&gt; {&#10;    return this.http.get&lt;UserRole[]&gt;(`${this.apiUrl}/role/${roleId}`);&#10;  }&#10;&#10;  /**&#10;   * Crea una nueva asignación de rol a usuario en el sistema.&#10;   * @param userId ID del usuario&#10;   * @param roleId ID del rol&#10;   * @returns Observable con la asignación creada&#10;   */&#10;  createUserRole(userId: string, roleId: string): Observable&lt;UserRole&gt; {&#10;    return this.http.post&lt;UserRole&gt;(`${this.apiUrl}/user/${userId}/role/${roleId}`, {});&#10;  }&#10;&#10;  /**&#10;   * Elimina una asignación de rol a usuario del sistema.&#10;   * @param userId Identificador único del usuario&#10;   * @param roleId Identificador único del rol&#10;   * @returns Observable vacío cuando la operación es exitosa&#10;   */&#10;  deleteUserRole(userId: string, roleId: string): Observable&lt;void&gt; {&#10;    return this.http.delete&lt;void&gt;(`${this.apiUrl}/user/${userId}/role/${roleId}`);&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="import { Injectable } from '@angular/core';&#10;import { HttpClient } from '@angular/common/http';&#10;import { Observable } from 'rxjs';&#10;import { UserRole } from '../models/user-role.model';&#10;import { environment } from 'src/environments/environment';&#10;&#10;/**&#10; * Servicio para gestionar operaciones CRUD de roles de usuario contra la API REST.&#10; * Proporciona métodos para obtener, crear, actualizar y eliminar asignaciones de roles a usuarios.&#10; * Utiliza HttpClient para realizar peticiones HTTP al backend.&#10; */&#10;@Injectable({ providedIn: 'root' })&#10;export class UserRoleService {&#10;  /**&#10;   * URL base de la API para roles de usuario.&#10;   * Se obtiene desde las variables de entorno.&#10;   */&#10;  private apiUrl = `${environment.apiUrl}user-role`;&#10;&#10;  /**&#10;   * Inyecta el cliente HTTP para realizar peticiones al backend.&#10;   * @param http Cliente HTTP de Angular&#10;   */&#10;  constructor(private http: HttpClient) {}&#10;&#10;  /**&#10;   * Obtiene todas las asignaciones de roles a usuarios registradas en el sistema.&#10;   * @returns Observable con un array de asignaciones de roles a usuarios&#10;   */&#10;  getUserRoles(): Observable&lt;UserRole[]&gt; {&#10;    return this.http.get&lt;UserRole[]&gt;(this.apiUrl);&#10;  }&#10;&#10;  /**&#10;   * Obtiene todas las asignaciones de roles para un usuario específico.&#10;   * @param userId Identificador único del usuario&#10;   * @returns Observable con un array de asignaciones de roles para el usuario&#10;   */&#10;  getUserRolesByUserId(userId: string): Observable&lt;UserRole[]&gt; {&#10;    return this.http.get&lt;UserRole[]&gt;(`${this.apiUrl}/user/${userId}`);&#10;  }&#10;&#10;  /**&#10;   * Obtiene todas las asignaciones de usuarios para un rol específico.&#10;   * @param roleId Identificador único del rol&#10;   * @returns Observable con un array de asignaciones de usuarios para el rol&#10;   */&#10;  getUserRolesByRoleId(roleId: string): Observable&lt;UserRole[]&gt; {&#10;    return this.http.get&lt;UserRole[]&gt;(`${this.apiUrl}/role/${roleId}`);&#10;  }&#10;&#10;  /**&#10;   * Crea una nueva asignación de rol a usuario en el sistema.&#10;   * @param userId ID del usuario&#10;   * @param roleId ID del rol&#10;   * @returns Observable con la asignación creada&#10;   */&#10;  createUserRole(userId: string, roleId: string): Observable&lt;UserRole&gt; {&#10;    return this.http.post&lt;UserRole&gt;(`${this.apiUrl}/user/${userId}/role/${roleId}`, {});&#10;  }&#10;&#10;  /**&#10;   * Elimina una asignación de rol a usuario del sistema.&#10;   * @param userId Identificador único del usuario&#10;   * @param roleId Identificador único del rol&#10;   * @returns Observable vacío cuando la operación es exitosa&#10;   */&#10;  deleteUserRole(userId: string, roleId: string): Observable&lt;void&gt; {&#10;    return this.http.delete&lt;void&gt;(`${this.apiUrl}/user/${userId}/role/${roleId}`);&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>